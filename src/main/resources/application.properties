spring.application.name=travelsafebackend

# Carica opzionalmente env.properties, evita crash in assenza del file
spring.config.import=optional:file:env.properties

# Configurazione datasource con fallback a valori di default
spring.datasource.url=jdbc:postgresql://localhost:5432/travelsafebackend
spring.datasource.username=postgres
spring.datasource.password=1235678


spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update


jwt.secret=${jwt.secret}
jwt.expiration=86400000

cors.allowed-origins=http://localhost:5173

spring.servlet.multipart.enabled=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

server.port=8080

geodb.api.key=${geodb.api.key}

# Cloudinary
cloudinary.cloud_name=${cloud_name}
cloudinary.api_key=${api_key}
cloudinary.api_secret=${api_secret}

# Mail SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${gmail.from}
spring.mail.password=${gmail.password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.enable=false
spring.mail.transport.protocol=smtp
spring.mail.default-encoding=UTF-8
spring.mail.properties.mail.debug=true

# OAuth2 Google
spring.security.oauth2.client.registration.google.client-id=${client_id}
spring.security.oauth2.client.registration.google.client-secret=${client_secret}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google

# API Key per GNews
gnews.apiKey=${gnews.apiKey}
